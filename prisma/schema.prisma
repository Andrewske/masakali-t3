// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    admin         Boolean?  @default(false)
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String   @id
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Villa {
    id           Int @id
    name         String  @unique

    reservations Reservation[]
    pricing      VillaPricing[]
    
}

// 

model Reservation {
    id            String   @id @default(cuid())
    smoobuId      Int?     @unique
    referenceId   String?  
    villaId       Int
    channelId     Int?
    userId        String?
    arrival       DateTime
    departure     DateTime
    createdAt     DateTime @default(now()) 
    guestName     String?
    firstName     String?
    lastName      String?
    email         String?
    phone         String?
    adults        Int?       @default(1)
    children      Int?       @default(0)
    note          String?    @db.Text
    extraNote     String?    @db.Text
    amount        Float?     @default(0)
    currency      String?    @default("IDR")
    commission    Float?     @default(0)
    cancelled     Boolean?   @default(false)
    villa         Villa  @relation(fields: [villaId], references: [id], onDelete: Cascade)
    @@index([villaId])
}


model VillaPricing {
    id            String    @id @default(cuid())
    villaId       Int
    date          DateTime
    price         Float?
    currency      String?   @default("IDR")
    available     Boolean   @default(true)

    villa         Villa  @relation(fields: [villaId], references: [id], onDelete: Cascade)
    @@index([villaId])
    @@unique([villaId, date])
}



model currency {
  id                 Int     @id @default(autoincrement())
  code               String  @unique
  name               String
  countries          country[] // This represents the inverse relationship from country to currency
  rate_from_idr      Float     @default(1)
}

model country {
  id                  Int      @id @default(autoincrement())
  name                String
  iso_alpha2          String   @unique
  iso_alpha3          String
  iso_numeric         Int
  currency_id         Int
  currency            currency @relation(fields: [currency_id], references: [id])
  flag                Bytes    // Storing the flag as a byte array
}